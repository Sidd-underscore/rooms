"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.slotMachine = void 0;
const crypto_1 = require("crypto");
const discord_js_1 = require("discord.js");
const functions_1 = require("../functions");
/**
 * Plays the slot machine
 * @param {GameParameters & object} options - Options for the game
 * @param {EmojiResolvable[]} options.emojis - The emojis of the slot machine
 * @param {string} [options.embed.loseMessage] - The lose message if the user loses
 * @returns {Promise<boolean>} Returns whether or not the user won, also can throw error if you made a mistake
 * @author CarelessInternet
 */
async function slotMachine({ message, emojis, embed = {} }) {
    embed.title ||= 'Slot Machine';
    embed.color ||= 'RANDOM';
    embed.winMessage ||= 'Congratulations, you won the slot machine! 🥳';
    embed.loseMessage ||= 'Unlucky, you lost at the slot machine. 😔';
    embed.footer ||= '';
    (0, functions_1.checkForNotReplied)(message);
    const [name, iconURL] = (0, functions_1.tagAndAvatar)(message);
    const gameEmbed = new discord_js_1.MessageEmbed()
        .setColor(embed.color)
        .setAuthor({ name, iconURL })
        .setTitle(embed.title)
        .setTimestamp()
        .setFooter({ text: embed.footer });
    for (const emoji of emojis) {
        if (emoji instanceof discord_js_1.GuildEmoji && !emoji.available) {
            throw new ReferenceError(`The emoji ${emoji.id} is not available`);
        }
    }
    const slotArray = generateSlotValues(emojis);
    const resultEmbed = slotMachineAsEmbed(slotArray, gameEmbed);
    const { win, msg: description } = checkForResult(slotArray, embed.winMessage, embed.loseMessage);
    resultEmbed.setDescription(description);
    message.reply({ embeds: [resultEmbed] });
    return win;
}
exports.slotMachine = slotMachine;
function generateSlotValues(emojis) {
    const slotArray = [[], [], []];
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            const randomEmoji = emojis[(0, crypto_1.randomInt)(emojis.length)];
            slotArray[i][j] = randomEmoji;
        }
    }
    return slotArray;
}
function slotMachineAsEmbed(slotArray, embed) {
    let slotMachineString = '';
    for (let i = 0; i < slotArray.length; i++) {
        for (let j = 0; j < slotArray[i].length; j++) {
            slotMachineString += `${slotArray[i][j]} | `;
        }
        slotMachineString = slotMachineString.slice(0, -3);
        if (i === 1) {
            slotMachineString += ' ⬅️';
        }
        slotMachineString += '\n';
    }
    embed.addField('Result:', slotMachineString);
    return embed;
}
function checkForResult(slotArray, winMessage, loseMessage) {
    const win = slotArray[1][0] === slotArray[1][1] && slotArray[1][1] === slotArray[1][2];
    return {
        win,
        msg: win ? winMessage : loseMessage
    };
}
