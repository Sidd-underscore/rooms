"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dice = void 0;
const crypto_1 = require("crypto");
const discord_js_1 = require("discord.js");
const functions_1 = require("../functions");
/**
 * Rolls some dice. You have to validate if the user's dice rolls are between 1-6
 * @param {object & GameParameters} options - Options for the game
 * @param {EmojiResolvable[]} options.diceEmojis - The emojis to use for the dice
 * @param {number[]} options.dice - The user's dice rolls
 * @param {string} [options.embed.loseMessage] - The message to display when the user loses
 * @returns {Promise<boolean>} Returns whether or not the user won
 * @author CarelessInternet
 */
async function dice({ message, diceEmojis, dice, embed = {} }) {
    const twoRolls = Array.isArray(dice) && dice.length === 2;
    embed.title ||= 'Dice Roll';
    embed.color ||= 'RANDOM';
    embed.winMessage ||= !twoRolls
        ? '{roll1} and {dice1}, you won!'
        : '{roll1} & {roll2}, and {dice1} & {dice2}, you won!';
    embed.loseMessage ||= !twoRolls
        ? '{roll1} and {dice1}, you lost'
        : '{roll1} & {roll2}, and {dice1} & {dice2}, you lost';
    embed.footer ||= '';
    (0, functions_1.checkForNotReplied)(message);
    const [name, iconURL] = (0, functions_1.tagAndAvatar)(message);
    const gameEmbed = new discord_js_1.MessageEmbed()
        .setColor(embed.color)
        .setAuthor({ name, iconURL })
        .setTitle(embed.title)
        .setTimestamp()
        .setFooter({ text: embed.footer });
    for (const emoji of diceEmojis) {
        if (emoji instanceof discord_js_1.GuildEmoji && !emoji.available) {
            throw new ReferenceError(`The emoji ${emoji.id} is not available`);
        }
    }
    const game = new Game(message, gameEmbed, {
        winMessage: embed.winMessage,
        loseMessage: embed.loseMessage
    }, diceEmojis, dice, twoRolls);
    const result = await game.play();
    return result;
}
exports.dice = dice;
class Game {
    constructor(message, gameEmbed, embedOptions, diceEmojis, dice, twoRolls) {
        this.message = message;
        this.gameEmbed = gameEmbed;
        this.embedOptions = embedOptions;
        this.diceEmojis = diceEmojis;
        this.dice = dice;
        this.twoRolls = twoRolls;
    }
    // damn this is some trash code
    async play() {
        this.rolledDice = [this.rollDice];
        if (this.twoRolls) {
            this.rolledDice.push(this.rollDice);
        }
        const win = this.determineWin();
        let message;
        if (win) {
            message = this.embedOptions.winMessage
                .replace(/{roll1}/, this.diceEmojis[this.dice[0] - 1].toString())
                .replace(/{dice1}/, this.diceEmojis[this.rolledDice[0] - 1].toString());
            if (this.twoRolls) {
                message = message
                    .replace(/{roll2}/, this.diceEmojis[this.dice[1] - 1].toString())
                    .replace(/{dice2}/, this.diceEmojis[this.rolledDice[1] - 1].toString());
            }
        }
        else {
            message = this.embedOptions.loseMessage
                .replace(/{roll1}/, this.diceEmojis[this.dice[0] - 1].toString())
                .replace(/{dice1}/, this.diceEmojis[this.rolledDice[0] - 1].toString());
            if (this.twoRolls) {
                message = message
                    .replace(/{roll2}/, this.diceEmojis[this.dice[1] - 1].toString())
                    .replace(/{dice2}/, this.diceEmojis[this.rolledDice[1] - 1].toString());
            }
        }
        this.gameEmbed.setDescription(message);
        this.message.reply({ embeds: [this.gameEmbed] });
        return win;
    }
    get rollDice() {
        return (0, crypto_1.randomInt)(1, 7);
    }
    determineWin() {
        if (this.twoRolls) {
            // https://stackoverflow.com/a/6230314/12425926
            return this.dice.sort().join(',') === this.rolledDice.sort().join(',');
        }
        else {
            // for speed, no need to sort
            return this.rolledDice[0] === this.dice[0];
        }
    }
}
